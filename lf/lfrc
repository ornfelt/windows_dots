#lf -log lf_log.txt

# Basic vars
set shellopts ''
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit on
set hidden

# cmds/functions
cmd mkdir ${{
    $path = "$args"
    if (-not (Test-Path -Path $path)) {
        New-Item -ItemType Directory -Path $path -Force | Out-Null
        Write-Output "Directory created: $path"
    } else {
        Write-Output "Directory already exists: $path"
    }
}}

#set shell cmd
set shell powershell

#cmd open $%EDITOR% %f%
cmd open ${{
    $editor = $env:EDITOR
    if (-not $editor) { $editor = "notepad" }
    & $editor "$env:f"
}}

# Keys
# Defaults:
# https://github.com/gokcehan/lf/blob/master/doc.md
map <c-r> reload
map \: shell -Command

#map <enter> &mimeopen "$f"
#map o &mimeopen "$f"
#map O $mimeopen --ask "$f"
map <enter> open
map o shell -Command

map v invert-below

cmd spawn_shell ${{
    powershell
}}

map S spawn_shell

map D delete
#map E extract
#map C copyto
#map M moveto

# Sorting
map ,n :set sortby natural; set info
map ,s :set sortby size; set info size
map ,t :set sortby time; set info time
map ,a :set sortby atime; set info atime
map ,c :set sortby ctime; set info ctime
map ,e :set sortby ext; set info

# Settings
map zh set hidden!
map zr set reverse!
map zn set info
map zs set info size
map zt set info time
map za set info size:time
map <c-h> set hidden!
map . set hidden!

# g-binds
map gg top
map gC cd C:/
map ge cd C:/Windows/System32
map gu cd C:/users
map gh cd ~/
map gl cd ~/AppData/Local
map gL cd ~/AppData/Roaming
#map gM cd /mnt
map ga cd ~/Downloads
map gd cd ~/Documents
map gw cd ~/OneDrive/Pictures
map gm cd ~/OneDrive/Videos
map g. cd ~/.config
map g? cd ~/AppData/Local/lf

#powershell -Command 'lf -remote \"send cd $env:code_root_dir/Code2"'
cmd cd_code_root_dir ${{
    powershell -Command "& '$env:ps_profile_path/my_scripts/cd_code_root_dir.ps1' 1"
}}

cmd cd_my_notes_path ${{
    powershell -Command "& '$env:ps_profile_path/my_scripts/cd_my_notes_path.ps1' 1"
}}

cmd cd_ps_profile_path ${{
    powershell -Command "& '$env:ps_profile_path/my_scripts/cd_ps_profile_path.ps1' 1"
}}

#lf -remote 'send echo hello world'
cmd cd_git_root ${{
    powershell -NoProfile -Command "lf -remote 'send cd ''$(git rev-parse --show-toplevel)'''"
}}

#wezterm cli split-pane --right --percent 50 -- powershell -NoExit -Command vim "$env:f"
cmd term_vim ${{
    wezterm cli split-pane --right --percent 50 -- powershell -NoExit -Command vim '$env:f'
}}

cmd firefox_open ${{
    firefox "$env:fx"
}}

map gc cd_code_root_dir
map gn cd_my_notes_path 
map gp cd_ps_profile_path 
map gr cd_git_root
map gf term_vim
map gx firefox_open

# Fuzzy search
map <c-f> $lf -remote "send select '$(fzf)'"

# Rename
#map c push A<c-u> # new rename
map c
map cw push A<c-u> # new rename
map a push A<a-b> # after extension
map A rename # at the very end
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
map cW bulkrename

# Tagging / marking
map <space>
#map <space> :toggle; down
map <space>s :toggle; down

# Custom
map V push :!nvim<space>
map <c-n> push :mkdir<space>

# Open explorer
#powershell -NoProfile -Command "Start-Process explorer.exe -ArgumentList '.'"
cmd open_explorer ${{
    Start-Process explorer.exe -ArgumentList '.'
}}

map bg open_explorer

# Copy path
cmd copy_path ${{
    powershell -Command "& '$env:ps_profile_path/my_scripts/copy_path.ps1' '$env:fx'"
}}

cmd copy_path_arg ${{
    powershell -Command "& '$env:ps_profile_path/my_scripts/copy_path.ps1' '$env:fx' 1"
}}

map <space>- copy_path
map <space>_ copy_path_arg

